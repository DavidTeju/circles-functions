/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/circles/{username}/feed": {
    /** Get a feed of posts for user's circle */
    get: {
      parameters: {
        path: {
          username: components["parameters"]["usernamePathParam"];
        };
      };
      responses: {
        /** @description The list of posts from user's circle */
        200: {
          content: {
            "application/json": components["schemas"]["Post"][];
          };
        };
        /** @description No user found found for the provided `username` */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        username: components["parameters"]["usernamePathParam"];
      };
    };
  };
  "/profiles/{username}/feed": {
    /** Get profile feed for user */
    get: {
      parameters: {
        path: {
          username: components["parameters"]["usernamePathParam"];
        };
      };
      responses: {
        /** @description The list of this users's posts */
        200: {
          content: {
            "application/json": components["schemas"]["Post"][];
          };
        };
        /** @description No user found found for the provided `username` */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        username: components["parameters"]["usernamePathParam"];
      };
    };
  };
  "/posts/{post-id}/like": {
    /** Like a post */
    post: {
      parameters: {
        query: {
          username: components["parameters"]["usernameQueryParam"];
        };
        path: {
          /** @description Post id for post to like */
          "post-id": string;
        };
      };
      responses: {
        /** @description successfully toggled like on post for user */
        200: {
          content: never;
        };
        /** @description No user or post found for corresponding id's */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        /** @description Post id for post to like */
        "post-id": string;
      };
    };
  };
  "/posts/{username}/new": {
    /** Upload a new post */
    post: {
      parameters: {
        path: {
          username: components["parameters"]["usernamePathParam"];
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            caption: string;
            "num-media-files": number;
            /**
             * Format: binary
             * @description The first image/video binary data to upload as part of the new post. Only accessed if num-media-files >=1.
             */
            m0?: string;
            /**
             * Format: binary
             * @description The second image/video binary data. Only accessed if num-media-files >=2.
             */
            m1?: string;
            /**
             * Format: binary
             * @description The third image/video binary data. Only accessed if num-media-files >=3.
             */
            m2?: string;
            /**
             * Format: binary
             * @description The fourth image/video binary data. Only accessed if num-media-files >=4.
             */
            m3?: string;
            /**
             * Format: binary
             * @description The fifth image/video binary data. Only accessed if num-media-files >=5.
             */
            m4?: string;
            /**
             * Format: binary
             * @description The sixth image/video binary data. Only accessed if num-media-files >=6.
             */
            m5?: string;
            /**
             * Format: binary
             * @description The seventh image/video binary data. Only accessed if num-media-files >=7.
             */
            m6?: string;
            /**
             * Format: binary
             * @description The eighth image/video binary data. Only accessed if num-media-files >=8.
             */
            m7?: string;
            /**
             * Format: binary
             * @description The ninth image/video binary data. Only accessed if num-media-files >=9.
             */
            m8?: string;
            /**
             * Format: binary
             * @description The tenth image/video binary data. Only accessed if num-media-files >=10.
             */
            m9?: string;
          };
        };
      };
      responses: {
        /** @description The post-id for the successfully uploaded post */
        200: {
          content: {
            "application/json": string;
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/profiles/create": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @description uid from firebase auth */
            uid: string;
            username: string;
            /** Format: email-address */
            "email-address"?: string;
            /** Format: phone-number */
            "phone-number"?: string;
          };
        };
      };
      responses: {
        /** @description successfully created profile/user */
        200: {
          content: never;
        };
        /** @description username or uid already exists */
        409: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/profiles/{username}/delete": {
    /**
     * Delete user profile/data
     * @description Must delete all user data and maintain a "null user" object for cleaning residual references.
     */
    post: {
      parameters: {
        path: {
          username: components["parameters"]["usernamePathParam"];
        };
      };
      responses: {
        /** @description successfully deleted profile/user data */
        200: {
          content: never;
        };
        /** @description No existing user found with this uid */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description user with uid already deleted. Value of user must be "null user" */
        410: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        username: components["parameters"]["usernamePathParam"];
      };
    };
  };
  "/profiles/{username}/exists": {
    /** Check if user exists */
    get: {
      parameters: {
        path: {
          username: components["parameters"]["usernamePathParam"];
        };
      };
      responses: {
        /** @description successfully returned boolean indicating if user exists */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        username: components["parameters"]["usernamePathParam"];
      };
    };
  };
  "/profiles/friend": {
    /** Create friendship between two users */
    post: {
      parameters: {
        query: {
          /** @description First user */
          uid1: string;
          /** @description Second user */
          uid2: string;
        };
      };
      responses: {
        /** @description successfully added friends */
        200: {
          content: never;
        };
        /** @description One or Both users not found. Error message must identify which user or both is missing. */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      query: {
        /** @description First user */
        uid1: string;
        /** @description Second user */
        uid2: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Post: {
      "post-id": string;
      username: string;
      caption: string;
      /**
       * @description list of links to each media file (photo/video)
       * @example [
       *   "https://firebasestorage.googleapis.com/v0/b/circles-test-dev.appspot.com/o/images%2Ftest.jpg?alt=media&token=47e4231d-e736-4f95-af4f-ecff7a752d7c"
       * ]
       */
      "media-array": string[];
      num_likes: number;
      /** Format: date-time */
      time_stamp: string;
    };
    Error: {
      /** @description A human readable error message */
      message: string;
    };
  };
  responses: {
    /** @description Unexpected/unhandled error/exception */
    ServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Access token is missing or invalid */
    UnauthorizedError: {
      content: never;
    };
  };
  parameters: {
    /** @description username of user for which to get post feed */
    usernamePathParam: string;
    /** @description username of user for which to get post feed */
    usernameQueryParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
